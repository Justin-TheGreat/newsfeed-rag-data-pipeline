services:
  # Zookeeper (required for Kafka)
  zookeeper:
    image: zookeeper:3.8
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181
    volumes:
      - zookeeper-data:/data
      - zookeeper-logs:/datalog

  # Kafka
  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/kafka

  # PostgreSQL
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fake_data_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fake_data_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI (optional - for monitoring)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  # Dagster webserver (using Python base image)
  dagster-webserver:
    build:
      context: .
      dockerfile: Dockerfile.dagster
    container_name: dagster-webserver
    ports:
      - "3000:3000"
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
    volumes:
      - ./dagster_pipeline.py:/opt/dagster/app/dagster_pipeline.py
      - ./dagster_scheduler.py:/opt/dagster/app/dagster_scheduler.py
      - dagster-home:/opt/dagster/dagster_home
    working_dir: /opt/dagster/app
    command: sh -c "sleep 30 && dagster dev -f dagster_pipeline.py -p 3000 --host 0.0.0.0"
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

  # Kafka consumer (runs as a separate service)
  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile.pyflink
    container_name: kafka-consumer
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: fake_data_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped
    command: sh -c "sleep 30 && python pyflink_consumer.py"

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  dagster-home:
